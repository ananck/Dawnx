<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DawnxLite</name>
    </assembly>
    <members>
        <member name="M:Dawnx.Algorithms.MathAlgorithm.NumberAlgorithm.Gcd(System.Int32,System.Int32)">
            <summary>
            Gets GCD(Greeting Common Divisor) number.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Dawnx.Data.ConsoleArgs">
            <summary>
            This class provides some methods to
                separate the console arguments to content or property.
            </summary>
        </member>
        <member name="M:Dawnx.CConsole.ConUtility.CreateBorderTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Prints console table for models.
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="models"></param>
        </member>
        <member name="M:Dawnx.CConsole.ConUtility.CreateBorderTable(System.String[],System.String[][],System.Int32[])">
            <summary>
            Prints console table for models.
            </summary>
            <param name="headers"></param>
            <param name="colLines"></param>
            <param name="lengths"></param>
        </member>
        <member name="M:Dawnx.CConsole.ConUtility.CreateNoBorderTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Prints console table with no border for models.
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="models"></param>
        </member>
        <member name="M:Dawnx.CConsole.ConUtility.CreateNoBorderTable(System.String[],System.String[][],System.Int32[])">
            <summary>
            Prints console table with no border for models.
            </summary>
            <param name="headers"></param>
            <param name="colLines"></param>
            <param name="lengths"></param>
        </member>
        <member name="M:Dawnx.CConsole.ConUtility.CreateRow(System.String[],System.Int32[])">
            <summary>
            Prints console row.
            </summary>
            <param name="cols"></param>
            <param name="colLengths"></param>
        </member>
        <member name="M:Dawnx.CConsole.ConUtility.CreateSeamlessTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Prints console seamless table for models.
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="models"></param>
        </member>
        <member name="M:Dawnx.CConsole.ConUtility.CreateSeamlessTable(System.String[],System.String[][],System.Int32[])">
            <summary>
            Prints console seamless table.
            </summary>
            <param name="headers"></param>
            <param name="colLines"></param>
            <param name="lengths"></param>
        </member>
        <member name="T:Dawnx.Lock.InstanceLock`1">
            <summary>
            Instance Lock
            </summary>
            <typeparam name="TInstance"></typeparam>
        </member>
        <member name="T:Dawnx.Lock.InstanceTsLock`1">
            <summary>
            Instance thread safe lock, inherits from <see cref="T:Dawnx.Lock.InstanceLock`1" />.
            </summary>
            <typeparam name="TInstance"></typeparam>
        </member>
        <member name="T:Dawnx.Lock.TypeLock`1">
            <summary>
            Type lock
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="T:Dawnx.Lock.TypeTsLock`1">
            <summary>
            Type thread safe lock, inherits from <see cref="T:Dawnx.Lock.InstanceLock`1" />.
            </summary>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:Dawnx.Patterns.UseDoubleCheck.Do(System.Func{System.Boolean},System.Object,System.Action)">
            <summary>
            Do a task with Double-checked locking pattern:
                if(@if) -> lock(@locker) -> if(@if) -> do(@then).
            </summary>
            <param name="if"></param>
            <param name="lock"></param>
            <param name="then"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseDoubleCheck.Do(System.Func{System.Boolean},System.String,System.Action)">
            <summary>
            Do a task with Double-checked locking pattern:
                if(@if) -> lock(@locker) -> if(@if) -> do(@then).
            </summary>
            <param name="if"></param>
            <param name="lock"></param>
            <param name="then"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseDoubleCheck.Do``1(System.Func{System.Boolean},System.Object,System.Func{``0},``0)">
            <summary>
            Do a task with Double-checked locking pattern:
                if(@if) -> lock(@locker) -> if(@if) -> do(@then).
            </summary>
            <param name="if"></param>
            <param name="lock"></param>
            <param name="then"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseDoubleCheck.Do``1(System.Func{System.Boolean},System.String,System.Action,``0)">
            <summary>
            Do a task with Double-checked locking pattern:
                if(@if) -> lock(@locker) -> if(@if) -> do(@then).
            </summary>
            <param name="if"></param>
            <param name="lock"></param>
            <param name="then"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseSpinLock.Do(System.Action,System.Func{System.Boolean})">
            <summary>
            Do a task with SpinLock pattern:
                do { @task() } until(@until())
            </summary>
            <param name="until"></param>
            <param name="task"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseSpinLock.Do(System.Action,System.Func{System.Boolean},System.TimeSpan)">
            <summary>
            Do a task with SpinLock pattern:
                do { @task(); sleep(@frequency) } until(@until())
            </summary>
            <param name="until"></param>
            <param name="task"></param>
            <param name="frequency"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseSpinLock.Do``1(System.Func{``0},System.Func{``0,System.Boolean})">
            <summary>
            Do a task with SpinLock pattern:
                do { $param=@task(); sleep(@frequency); } until(@until($param))
            </summary>
            <param name="until"></param>
            <param name="task"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseSpinLock.Do``1(System.Func{``0},System.Func{``0,System.Boolean},System.TimeSpan)">
            <summary>
            Do a task with SpinLock pattern:
                do { $param=@task(); sleep(@frequency); } until(@until($param))
            </summary>
            <param name="until"></param>
            <param name="task"></param>
            <param name="frequency"></param>
        </member>
        <member name="M:Dawnx.Ranges.IntegerRange.Create(System.Int32)">
            <summary>
            The range type represents an immutable sequence of numbers
                and is commonly used for looping a specific number of times in for loops.
            </summary>
            <param name="stop"></param>
        </member>
        <member name="M:Dawnx.Ranges.IntegerRange.Create(System.Int32,System.Int32)">
            <summary>
            The range type represents an immutable sequence of numbers
                and is commonly used for looping a specific number of times in for loops.
            </summary>
            <param name="start"></param>
            <param name="stop"></param>
        </member>
        <member name="M:Dawnx.Ranges.IntegerRange.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            The range type represents an immutable sequence of numbers
                and is commonly used for looping a specific number of times in for loops.
            </summary>
            <param name="start"></param>
            <param name="stop"></param>
            <param name="scan"></param>
        </member>
        <member name="M:Dawnx.Sequences.LetterSequence.GetNumber(System.String)">
            <summary>
            Gets the number of letter. It's start at 0. (For example, "A" is 0).
            </summary>
            <param name="letter"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Sequences.LetterSequence.GetLetter(System.Int32)">
            <summary>
            Gets the letter of number. It's start at "A". (For example, 0 is "A").
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.ColorUtility.CreateFromAhsv(System.Single,System.Single,System.Single)">
            <summary>
            Creates a color using Alpha(255) + HSV model.
            </summary>
            <param name="hue">[0,360)</param>
            <param name="saturation">[0,1]</param>
            <param name="value">[0,1]</param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.ColorUtility.CreateFromAhsv(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color using Alpha + HSV model.
            </summary>
            <param name="alpha"></param>
            <param name="hue">[0,360)</param>
            <param name="saturation">[0,1]</param>
            <param name="value">[0,1]</param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.FileUtility.GetAllFiles(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.IPUtility.GetLongString(System.Net.IPAddress)">
            <summary>
            Converts a <see cref="T:System.Net.IPAddress"/>  into a long IP string.
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.ObjectUtility.GetPropertyDictionary(System.Object)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an anonymouse type.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.ObjectUtility.GetPropertyPureDictionary(System.Object,System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an anonymouse type.
            </summary>
            <param name="instance"></param>
            <param name="ignorePrefix"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.RegexUtility.IPRange(System.String)">
            <summary>
            Compile IPv4RangeRegexExp to Regex.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.StringUtility.CommonStarts(System.String[])">
            <summary>
            Get the common starts of the specified strings.
            </summary>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.StringUtility.CamelCase(System.String)">
            <summary>
            Converts a string to CamelCase string.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.StringUtility.KebabCase(System.String)">
            <summary>
            Converts a string to KebabCase string.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.StringUtility.Extract``1(System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.FormattableString}})">
            <summary>
            Projects some strings back into an instance's field or property. (Using `?` on the right side of a variable disables greedy matching)
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="source"></param>
            <param name="instance"></param>
            <param name="patternExp"></param>
        </member>
        <member name="T:Dawnx.JSend.Error`1">
            <summary>
            There was a problem with the data submitted, or some pre-condition of the API call wasn't satisfied.
            </summary>
        </member>
        <member name="P:Dawnx.JSend.Error`1.message">
            <summary>
            Required Key:
                A meaningful, end-user-readable (or at the least log-worthy) message, explaining what went wrong.
            </summary>
        </member>
        <member name="P:Dawnx.JSend.Error`1.code">
            <summary>
            Optional Key:
                A numeric code corresponding to the error, if applicable.
            </summary>
        </member>
        <member name="P:Dawnx.JSend.Error`1.data">
            <summary>
            Optional Key:
                A generic container for any other information about the error,
                    i.e.the conditions that caused the error, stack traces, etc.
            </summary>
        </member>
        <member name="T:Dawnx.JSend.Fail`1">
            <summary>
            There was a problem with the data submitted, or some pre-condition of the API call wasn't satisfied.
            </summary>
        </member>
        <member name="P:Dawnx.JSend.Fail`1.data">
            <summary>
            Required Key:
                Provides the wrapper for the details of why the request failed.
                If the reasons for failure correspond to POST values,
                the response object's keys SHOULD correspond to those POST values.
            </summary>
        </member>
        <member name="T:Dawnx.JSend.Success`1">
            <summary>
            All went well, and (usually) some data was returned.
            </summary>
        </member>
        <member name="P:Dawnx.JSend.Success`1.data">
            <summary>
            Required Key:
                Acts as the wrapper for any data returned by the API call.
                If the call returns no data, data should be set to null.
            </summary>
        </member>
        <member name="T:Dawnx.Scope`1">
            <summary>
            Cooperate with 'using' keyword to use thread safe <see cref="T:Dawnx.Scope`1"/>.
            </summary>
            <typeparam name="TSelf"></typeparam>
        </member>
        <member name="T:Dawnx.Scope`2">
            <summary>
            Cooperate with 'using' keyword to use thread safe <see cref="T:Dawnx.Scope`2"/>.
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TSelf"></typeparam>
        </member>
    </members>
</doc>
