<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DawnxLite</name>
    </assembly>
    <members>
        <member name="T:Dawnx.Analysises.ConsoleArgs">
            <summary>
            This class provides a method to decompose console arguments into <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </summary>
        </member>
        <member name="M:Dawnx.Con.ConsoleUtility.GetConsoleLength(System.String)">
            <summary>
            Gets the console length.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Con.ConsoleUtility.GetCountOfDoubleBytesChar(System.String)">
            <summary>
            Gets the count of double bytes char.
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Con.ConsoleUtility.PrintTableLine(System.Int32[],System.String,System.Object[])">
            <summary>
            Gets table line, like ┌┬┐(specified by the format value).
            </summary>
            <param name="lengths"></param>
            <param name="format"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Con.ConsoleUtility.PrintTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Prints console table for models.
            </summary>
            <typeparam name="TModel"></typeparam>
            <param name="models"></param>
        </member>
        <member name="T:Dawnx.Data.SqlScope`3">
            <summary>
            Easy to use and secure SQL Executor
            </summary>
            <typeparam name="TDbConnection"></typeparam>
            <typeparam name="TDbCommand"></typeparam>
            <typeparam name="TDbParameter"></typeparam>
        </member>
        <member name="M:Dawnx.DawnArray.Base64String(System.Byte[])">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation
                that is encoded with base-64 digits.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.HexString(System.Byte[],System.String)">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation
                that is encoded with hex digits.
            </summary>
            <param name="this"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.String(System.Byte[])">
            <summary>
            Decodes all the bytes in the specified byte(UTF-8) array into a string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.String(System.Byte[],System.String)">
            <summary>
            Decodes all the bytes in the specified byte array into a string.
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.String(System.Byte[],System.Text.Encoding)">
            <summary>
            Decodes all the bytes in the specified byte array into a string.
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.LBound(System.Array)">
            <summary>
            Gets the index of the first element in the array.
                Usually, LBound() returns 0, since arrays are zero-based by default.
                but in some rare cases they are not.
                For example, you use Array.CreateInstance(Type, int[], int[]) to create an Array.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.UBound(System.Array)">
            <summary>
            Gets the index of the last element in the array.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.Init``1(``0[],System.Func{System.Int32,``0})">
            <summary>
            Use a method to initailize each element of an array.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="initMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.Self``1(``0[],System.Action{``0[],System.Int32})">
            <summary>
            Do a task for itself.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.IndexOf``1(``0[],``0)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified element in this array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.Slice``1(``0[],System.Int32)">
            <summary>
            Retrieves an array from this instance. The new array starts at a specified
                element position and continues to the end of the array.
                (If the parameter is negative, the search will start on the right.)
            </summary>
            <param name="this"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.Slice``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves an array from this instance. The new array starts at a specified
                element position and ends with a specified element position.
                (If the parameters is negative, the search will start on the right.)
            </summary>
            <param name="this"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.Shuffle``1(``0[])">
            <summary>
            Shuffles a array and returns itself.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnArray.SelectPage``1(``0[],System.Int32,System.Int32)">
            <summary>
            Projects page elements of a sequence into a new form.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="pageNumber">'pageNumber' starts at 1</param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnBoolean.Not(System.Boolean)">
            <summary>
            Invert the Boolean value.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.FirstDayOfMonth(System.DateTime)">
            <summary>
            Gets the first day of the month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.LastDayOfMonth(System.DateTime)">
            <summary>
            Gets the last day of the month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.PastDay(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets a past day for the specified day of week.
            </summary>
            <param name="this"></param>
            <param name="dayOfWeek"></param>
            <param name="includeCurrentDay"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.FutureDay(System.DateTime,System.DayOfWeek,System.Boolean)">
            <summary>
            Gets a future day for the specified day of week.
            </summary>
            <param name="this"></param>
            <param name="dayOfWeek"></param>
            <param name="includeCurrentDay"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.WeekInMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the number of weeks in a month for the specified date.
            (eg. If define Sunday as the fisrt day of the week, its first appearance means week 1, before is week 0.)
            </summary>
            <param name="this"></param>
            <param name="weekStart"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.Week(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the number of weeks in a year for the specified date. 
            </summary>
            <param name="this"></param>
            <param name="weekStart"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.UnixTimeMilliseconds(System.DateTime)">
            <summary>
            Gets the Unix Timestamp(milliseconds) of the specified DateTime(UTC).
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.UnixTimeSeconds(System.DateTime)">
            <summary>
            Gets the Unix Timestamp(seconds) of the specified DateTime(UTC).
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.BeginningOfYear(System.DateTime)">
            <summary>
            Get the start point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.EndOfYear(System.DateTime)">
            <summary>
            Get the end point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.BeginningOfMonth(System.DateTime)">
            <summary>
            Get the start point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.EndOfMonth(System.DateTime)">
            <summary>
            Get the end point of the sepecified month.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.BeginningOfDay(System.DateTime)">
            <summary>
            Get the start point of the sepecified day.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnDateTime.EndOfDay(System.DateTime)">
            <summary>
            Get the end point of the sepecified day.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnICollection.SelectPage``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Int32)">
            <summary>
            Projects page elements of a sequence into a new form.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="pageNumber">'pageNumber' starts at 1</param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.OrderByCaseStrategy``1(System.Collections.Generic.IEnumerable{``0},Dawnx.Linq.IOrderStrategy{``0})">
            <summary>
            Use an OrderByStrategy to generate an orberby expression.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="this"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.OrderByCaseDescendingStrategy``1(System.Collections.Generic.IEnumerable{``0},Dawnx.Linq.IOrderStrategy{``0})">
            <summary>
            Use an OrderByStrategy to generate an orberby expression.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="this"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.WhereStrategy``1(System.Collections.Generic.IEnumerable{``0},Dawnx.Linq.IWhereStrategy{``0})">
            <summary>
            Use a WhereStragtegy to generate a where expression.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="this"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.SelectPage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Projects page elements of a sequence into a new form.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="pageNumber">'pageNumber' starts at 1</param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.PageCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Calculates the max page number through the specified page size.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Do action for each item.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.Each``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Do action for each item.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Do action for each item.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.Each``1(System.Collections.IEnumerable,System.Action{``0,System.Int32})">
            <summary>
            Do action for each item.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.AsVI``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tuples containing values and indexes.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.AsVI``1(System.Collections.IEnumerable)">
            <summary>
            Returns a collection of tuples containing values and indexes.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates the members of a collection, using the specified separator between each member.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.Distribute``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Projects each element of the specified array into a new distributed array collection by 'Classify' method.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TConditionRet"></typeparam>
            <param name="this"></param>
            <param name="Classify"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.Distribute``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Projects each element of the specified array into a new distributed array collection by 'Classify' method.
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TConditionRet"></typeparam>
            <param name="this"></param>
            <param name="Classify"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.Distribute``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Projects each element of the specified array into a new distributed array collection by its index.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.DistinctByValue``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Returns distinct elements from a sequence by using a specified properties to compare values.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.ExceptByValue``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Produces the set difference of two sequences by using the specified properties to compare values.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.UnionByValue``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Produces the set union of two sequences by using a specified properties.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEnumerable.IntersectByValue``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Produces the set intersection of two sequences by using the specified properties to compare values.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnInt32.IsOdd(System.Int32)">
            <summary>
            Returns whether the specified number is odd.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnInt32.IsEven(System.Int32)">
            <summary>
            Returns whether the specified number is even.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnInt64.IsOdd(System.Int64)">
            <summary>
            Returns whether the specified number is odd.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnInt64.IsEven(System.Int64)">
            <summary>
            Returns whether the specified number is even.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIPAddress.ToLong(System.Net.IPAddress)">
            <summary>
            Converts a IP Address into a uint value.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIQueryable.OrderByCaseStrategy``1(System.Linq.IQueryable{``0},Dawnx.Linq.IOrderStrategy{``0})">
            <summary>
            Use an OrderByStrategy to generate an orberby expression.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="this"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIQueryable.OrderByCaseDescendingStrategy``1(System.Linq.IQueryable{``0},Dawnx.Linq.IOrderStrategy{``0})">
            <summary>
            Use an OrderByStrategy to generate an orberby expression.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="this"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIQueryable.WhereStrategy``1(System.Linq.IQueryable{``0},Dawnx.Linq.IWhereStrategy{``0})">
            <summary>
            Use a WhereStragtegy to generate a where expression.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="this"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIQueryable.SelectPage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Projects page elements of a sequence into a new form.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="pageNumber">'pageNumber' starts at 1</param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIQueryable.PageCount``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Calculates the max page number through the specified page size.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnJaggedArray.Each``1(``0[][],System.Action{``0,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnJaggedArray.Each``1(``0[][][],System.Action{``0,System.Int32,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnJaggedArray.Each``1(``0[][][][],System.Action{``0,System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnJaggedArray.ToMultiArray``1(``0[][])">
            <summary>
            Converts jagged array to multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnJaggedArray.ToMultiArray``1(``0[][][])">
            <summary>
            Converts jagged array to multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnJaggedArray.ToMultiArray``1(``0[][][][])">
            <summary>
            Converts jagged array to multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Each``1(``0[0:,0:],System.Action{``0,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Each``1(``0[0:,0:,0:],System.Action{``0,System.Int32,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Each``1(``0[0:,0:,0:,0:],System.Action{``0,System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Each``1(``0[0:,0:,0:,0:,0:],System.Action{``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Each``1(``0[0:,0:,0:,0:,0:,0:],System.Action{``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Each``1(``0[0:,0:,0:,0:,0:,0:,0:],System.Action{``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Each``1(``0[0:,0:,0:,0:,0:,0:,0:,0:],System.Action{``0,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.ToJaggedArray``1(``0[0:,0:])">
            <summary>
            Converts jagged array to multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.ToJaggedArray``1(``0[0:,0:,0:])">
            <summary>
            Converts jagged array to multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.ToJaggedArray``1(``0[0:,0:,0:,0:])">
            <summary>
            Converts jagged array to multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Select``2(``0[0:,0:],System.Func{``0,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Select``2(``0[0:,0:,0:],System.Func{``0,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Select``2(``0[0:,0:,0:,0:],System.Func{``0,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Select``2(``0[0:,0:,0:,0:,0:],System.Func{``0,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Select``2(``0[0:,0:,0:,0:,0:,0:],System.Func{``0,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Select``2(``0[0:,0:,0:,0:,0:,0:,0:],System.Func{``0,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnMultiArray.Select``2(``0[0:,0:,0:,0:,0:,0:,0:,0:],System.Func{``0,``1})">
            <summary>
            Do action for each item of multidimensional array.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnObject.IsNull``1(``0)">
            <summary>
            Determines whether the specified object is null.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnObject.IsNotNull``1(``0)">
            <summary>
            Determines whether the specified object is not null.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnObject.Self``1(``0,System.Action{``0})">
            <summary>
            Do a task for itself.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <param name="this"></param>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnObject.For``2(``0,System.Func{``0,``1})">
            <summary>
            Casts the element to the specified type through the specified convert method.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnObject.For``2(``0,Dawnx.ForMethod{``0,``1})">
            <summary>
            Casts the element to the specified type through the specified ForMethod.
            </summary>
            <typeparam name="TSelf"></typeparam>
            <typeparam name="TRet"></typeparam>
            <param name="this"></param>
            <param name="convert"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnObject.In``1(``0,``0[])">
            <summary>
            Determines whether the specified element in a sequence by using the default equality comparer.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnObject.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified element in a sequence by using the default equality comparer.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnObject.ToExpandoObject(System.Object)">
            <summary>
            Converts the specified object to <see cref="T:System.Dynamic.ExpandoObject"/>.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Bytes(System.String)">
            <summary>
            Encodes all the characters in the specified string into a sequence of bytes(UTF-8), then returns it.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Bytes(System.String,System.Text.Encoding)">
            <summary>
            Encodes all the characters in the specified string into a sequence of bytes, then returns it.
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Bytes(System.String,System.String)">
            <summary>
            Encodes all the characters in the specified string into a sequence of bytes, then returns it.
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.BytesFromBase64(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to
                an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.BytesFromHex(System.String,System.String)">
            <summary>
            Converts the specified string, which encodes binary data as hex digits, to
                an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="this"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Base64Encode(System.String)">
            <summary>
            Converts the specified string into a Base64-encoded string(UTF-8).
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Base64Encode(System.String,System.Text.Encoding)">
            <summary>
            Converts the specified string into a Base64-encoded string.
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.HexEncode(System.String)">
            <summary>
            Converts the specified string into a Hex-encoded string(UTF-8).
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.HexEncode(System.String,System.Text.Encoding)">
            <summary>
            Converts the specified string into a Hex-encoded string.
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Base64Decode(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to a new string(UTF-8).
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Base64Decode(System.String,System.Text.Encoding)">
            <summary>
            Converts the specified string, which encodes binary data as base-64 digits, to a new string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.HexDecode(System.String,System.String)">
            <summary>
            Converts the specified string, which encodes binary data as hex digits, to a new string(UTF-8).
            </summary>
            <param name="this"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.HexDecode(System.String,System.Text.Encoding,System.String)">
            <summary>
            Converts the specified string, which encodes binary data as hex digits, to a new string.
            </summary>
            <param name="this"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.UrlEncode(System.String)">
            <summary>
            Converts the specified string into a URL-encoded string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.UrlDecode(System.String)">
            <summary>
            Converts the specified string that has been encoded for transmission in a URL into a decoded string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.HtmlEncode(System.String)">
            <summary>
            Converts the specified string to an HTML-encoded string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.HtmlDecode(System.String)">
            <summary>
            Converts the specified string that has been HTML-encoded for HTTP transmission into a decoded string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.IsNullOrEmpty(System.String)">
            <summary>
            Indicates whether the specified string is null or an System.String.Empty string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is null, empty, or consists only of white-space characters.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.IsEmpty(System.String)">
            <summary>
            Indicates whether the specified string is an System.String.Empty string.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.IsWhiteSpace(System.String)">
            <summary>
            Indicates whether a specified string is empty, or consists only of white-space characters.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Center(System.String,System.Int32,System.Char)">
            <summary>
            Returns centered in a string of length width. Padding is done using the specified fillchar (default is an ASCII space).
            </summary>
            <param name="this"></param>
            <param name="width"></param>
            <param name="fillChar"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.IsMatch(System.String,System.String)">
            <summary>
            Indicates whether the string matches the specified regular expression.
            </summary>
            <param name="this"></param>
            <param name="regex"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.IsMatch(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Indicates whether the string matches the specified regular expression.
            </summary>
            <param name="this"></param>
            <param name="regex"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Slice(System.String,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
                character position and continues to the end of the string.
                (If the parameter is negative, the search will start on the right.)
            </summary>
            <param name="this"></param>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Slice(System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves a substring from this instance. The substring starts at a specified
                character position and ends with a specified character position.
                (If the parameters is negative, the search will start on the right.)
            </summary>
            <param name="this"></param>
            <param name="start"></param>
            <param name="stop"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.CharAt(System.String,System.Int32)">
            <summary>
            Returns the char at a specified index in the string.
                (If the parameter is negative, the search will start on the right.)
            </summary>
            <param name="this"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Replicate(System.String,System.Int32)">
            <summary>
            Returns a string which is equivalent to adding it to itself n times.
            </summary>
            <param name="this"></param>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Count(System.String,System.String,System.Boolean)">
            <summary>
            Returns the number of occurrences of substring sub in the string.
            </summary>
            <param name="this"></param>
            <param name="searchString"></param>
            <param name="overlapping"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.NormalizeNewLine(System.String)">
            <summary>
            Returns a new string which is normalized by the newline string of current environment.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.GetLines(System.String,System.Boolean)">
            <summary>
            Divides a string into multi-lines. If the string is null, return string[0]. 
            (Perhaps you should set `normalizeNewLine` to true to convert the NewLine 
                which is defined in other system into the current system's.)
            </summary>
            <param name="this"></param>
            <param name="normalizeNewLine"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Unique(System.String)">
            <summary>
            Removes all leading and trailing white-space characters from the current string,
                and replaces multiple spaces with a single.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Project(System.String,System.String,System.String)">
            <summary>
            Projects the specified string to a new string by using regular expressions (using Single-line Mode).
                If there is no match, this method returns null.
            </summary>
            <param name="this"></param>
            <param name="regex"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.Project(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Projects the specified string to a new string by using regular expressions.
                If there is no match, this method returns null.
            </summary>
            <param name="this"></param>
            <param name="regex"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.UnitInsert(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Returns a new string which is consisting of many units by the specified length number of characters.
            </summary>
            <param name="this"></param>
            <param name="separator"></param>
            <param name="unitLength"></param>
            <param name="padRight"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnString.CapitalizeFirst(System.String,System.Boolean)">
            <summary>
            Returns a copy of the string with its first character capitalized.
            </summary>
            <param name="this"></param>
            <param name="isSet"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnUInt32.IsOdd(System.UInt32)">
            <summary>
            Returns whether the specified number is odd.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnUInt32.IsEven(System.UInt32)">
            <summary>
            Returns whether the specified number is even.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnUInt64.IsOdd(System.UInt64)">
            <summary>
            Returns whether the specified number is odd.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnUInt64.IsEven(System.UInt64)">
            <summary>
            Returns whether the specified number is even.
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="F:Dawnx.Definition.Unicode.Chinese">
            <summary>
            The Chinese includes
                CJK_Radicals_Supplement,
                CJK_Unified_Ideographs_Extension_A,
                CJK_Unified_Ideographs,
                CJK_Compatibility_Ideographs.
            </summary>
        </member>
        <member name="F:Dawnx.Definition.Unicode.Japanese">
            <summary>
            The Japanese includes
                CJK_Radicals_Supplement,
                CJK_Unified_Ideographs_Extension_A,
                CJK_Unified_Ideographs,
                CJK_Compatibility_Ideographs,
                Hiragana,
                Katakana_Phonetic_Extensions,
                Halfwidth_and_Fullwidth_Forms.
            </summary>
        </member>
        <member name="F:Dawnx.Definition.Unicode.Korean">
            <summary>
            The Korean includes
                CJK_Radicals_Supplement,
                CJK_Unified_Ideographs_Extension_A,
                CJK_Unified_Ideographs,
                CJK_Compatibility_Ideographs,
                Hangul_Jamo,
                Hangul_Compatibility_Jamo,
                Hangul_Syllables,
                Halfwidth_and_Fullwidth_Forms.
            </summary>
        </member>
        <member name="F:Dawnx.Definition.Unit.Storage.B">
            <summary>
            Unit: Byte
            </summary>
        </member>
        <member name="F:Dawnx.Definition.Unit.Storage.KB">
            <summary>
            Unit: Byte
            </summary>
        </member>
        <member name="F:Dawnx.Definition.Unit.Storage.MB">
            <summary>
            Unit: Byte
            </summary>
        </member>
        <member name="F:Dawnx.Definition.Unit.Storage.GB">
            <summary>
            Unit: Byte
            </summary>
        </member>
        <member name="F:Dawnx.Definition.Unit.Storage.TB">
            <summary>
            Unit: Byte
            </summary>
        </member>
        <member name="F:Dawnx.Definition.Unit.Storage.PB">
            <summary>
            Unit: Byte
            </summary>
        </member>
        <member name="F:Dawnx.Definition.Unit.Storage.EB">
            <summary>
            Unit: Byte
            </summary>
        </member>
        <member name="T:Dawnx.Definition.MimeType">
            <summary>
            MIME Type definitions
            (Referrer: https://www.iana.org/assignments/media-types/media-types.xhtml)
            </summary>
        </member>
        <member name="M:Dawnx.Patterns.UseDoubleCheck.Do(System.Func{System.Boolean},System.Object,System.Action)">
            <summary>
            Do a task with Double-checked locking pattern:
                if(@if) -> lock(@locker) -> if(@if) -> do(@then).
            </summary>
            <param name="if"></param>
            <param name="lock"></param>
            <param name="then"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseSpinLock.Do(System.Action,System.Func{System.Boolean})">
            <summary>
            Do a task with SpinLock pattern:
                do { @task() } until(@until())
            </summary>
            <param name="until"></param>
            <param name="task"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseSpinLock.Do(System.Action,System.Func{System.Boolean},System.TimeSpan)">
            <summary>
            Do a task with SpinLock pattern:
                do { @task(); sleep(@frequency) } until(@until())
            </summary>
            <param name="until"></param>
            <param name="task"></param>
            <param name="frequency"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseSpinLock.Do``1(System.Func{``0},System.Func{``0,System.Boolean})">
            <summary>
            Do a task with SpinLock pattern:
                do { $param=@task(); sleep(@frequency); } until(@until($param))
            </summary>
            <param name="until"></param>
            <param name="task"></param>
        </member>
        <member name="M:Dawnx.Patterns.UseSpinLock.Do``1(System.Func{``0},System.Func{``0,System.Boolean},System.TimeSpan)">
            <summary>
            Do a task with SpinLock pattern:
                do { $param=@task(); sleep(@frequency); } until(@until($param))
            </summary>
            <param name="until"></param>
            <param name="task"></param>
            <param name="task"></param>
        </member>
        <member name="M:Dawnx.Ranges.IntegerRange.Create(System.Int32)">
            <summary>
            The range type represents an immutable sequence of numbers
                and is commonly used for looping a specific number of times in for loops.
            </summary>
            <param name="stop"></param>
        </member>
        <member name="M:Dawnx.Ranges.IntegerRange.Create(System.Int32,System.Int32)">
            <summary>
            The range type represents an immutable sequence of numbers
                and is commonly used for looping a specific number of times in for loops.
            </summary>
            <param name="start"></param>
            <param name="stop"></param>
        </member>
        <member name="M:Dawnx.Ranges.IntegerRange.Create(System.Int32,System.Int32,System.Int32)">
            <summary>
            The range type represents an immutable sequence of numbers
                and is commonly used for looping a specific number of times in for loops.
            </summary>
            <param name="start"></param>
            <param name="stop"></param>
            <param name="scan"></param>
        </member>
        <member name="M:Dawnx.Reflection.DefaultBasicTypeConverter.#ctor(System.Boolean)">
            <summary>
            If set 'strict', null string will be replaced by default of the source.
            </summary>
            <param name="strict"></param>
        </member>
        <member name="M:Dawnx.Sequences.LetterSequence.GetNumber(System.String)">
            <summary>
            Gets the number of letter. It's start at 0. (For example, "A" is 0).
            </summary>
            <param name="letter"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Sequences.LetterSequence.GetLetter(System.Int32)">
            <summary>
            Gets the letter of number. It's start at "A". (For example, 0 is "A").
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.Base64Utility.ConvertBase64ToUrlBase64(System.String)">
            <summary>
            Converts the specified string, which encodes binary data as url safe base-64 digits, to
                an equivalent 8-bit unsigned integer array.
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.Base64Utility.ConvertUrlBase64ToBase64(System.String)">
            <summary>
            Converts an array of 8-bit unsigned integers to its equivalent string representation
                that is encoded with url safe base-64 digits.
            </summary>
            <param name="urlBase64"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.ColorUtility.CreateFromAhsv(System.Single,System.Single,System.Single)">
            <summary>
            Creates a color using Alpha(255) + HSV model.
            </summary>
            <param name="hue">[0,360)</param>
            <param name="saturation">[0,1]</param>
            <param name="value">[0,1]</param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.ColorUtility.CreateFromAhsv(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Creates a color using Alpha + HSV model.
            </summary>
            <param name="alpha"></param>
            <param name="hue">[0,360)</param>
            <param name="saturation">[0,1]</param>
            <param name="value">[0,1]</param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.DateTimeUtility.UnixMinValue">
            <summary>
            Gets the DateTime(UTC) of UnixMinValue.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.DateTimeUtility.FromUnixSeconds(System.Int64)">
            <summary>
            Converts the sepecified Unix TimeStamp(seconds) to DateTime(UTC).
            </summary>
            <param name="seconds"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.DateTimeUtility.FromUnixMilliseconds(System.Int64)">
            <summary>
            Converts the sepecified Unix TimeStamp(milliseconds) to DateTime(UTC).
            </summary>
            <param name="milliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.DateTimeUtility.ToUnixTimeMilliseconds(System.DateTime)">
            <summary>
            Gets the Unix Timestamp(milliseconds) of the specified DateTime(UTC).
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.DateTimeUtility.ToUnixTimeSeconds(System.DateTime)">
            <summary>
            Gets the Unix Timestamp(seconds) of the specified DateTime(UTC).
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.DateTimeUtility.GetMonths(System.DateTime,System.DateTime)">
            <summary>
            Gets the range of months.
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.DateTimeUtility.GetDays(System.DateTime,System.DateTime)">
            <summary>
            Gets the range of days.
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.IPUtility.GetLongString(System.Net.IPAddress)">
            <summary>
            Converts a <see cref="T:System.Net.IPAddress"/>  into a long IP string.
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.RegexUtility.IPRange(System.String)">
            <summary>
            Compile IPv4RangeRegexExp to Regex.
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.Utilities.StringUtility.CommonStarts(System.String[])">
            <summary>
            Get the common starts of the specified strings.
            </summary>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="T:Dawnx.JSend.Error`1">
            <summary>
            There was a problem with the data submitted, or some pre-condition of the API call wasn't satisfied.
            </summary>
        </member>
        <member name="P:Dawnx.JSend.Error`1.message">
            <summary>
            Required Key:
                A meaningful, end-user-readable (or at the least log-worthy) message, explaining what went wrong.
            </summary>
        </member>
        <member name="P:Dawnx.JSend.Error`1.code">
            <summary>
            Optional Key:
                A numeric code corresponding to the error, if applicable.
            </summary>
        </member>
        <member name="P:Dawnx.JSend.Error`1.data">
            <summary>
            Optional Key:
                A generic container for any other information about the error,
                    i.e.the conditions that caused the error, stack traces, etc.
            </summary>
        </member>
        <member name="T:Dawnx.JSend.Fail`1">
            <summary>
            There was a problem with the data submitted, or some pre-condition of the API call wasn't satisfied.
            </summary>
        </member>
        <member name="P:Dawnx.JSend.Fail`1.data">
            <summary>
            Required Key:
                Provides the wrapper for the details of why the request failed.
                If the reasons for failure correspond to POST values,
                the response object's keys SHOULD correspond to those POST values.
            </summary>
        </member>
        <member name="T:Dawnx.JSend.Success`1">
            <summary>
            All went well, and (usually) some data was returned.
            </summary>
        </member>
        <member name="P:Dawnx.JSend.Success`1.data">
            <summary>
            Required Key:
                Acts as the wrapper for any data returned by the API call.
                If the call returns no data, data should be set to null.
            </summary>
        </member>
        <member name="T:Dawnx.Scope`1">
            <summary>
            Cooperate with 'using' keyword to use thread safe <see cref="T:Dawnx.Scope`1"/>.
            </summary>
            <typeparam name="TSelf"></typeparam>
        </member>
        <member name="T:Dawnx.Scope`2">
            <summary>
            Cooperate with 'using' keyword to use thread safe <see cref="T:Dawnx.Scope`2"/>.
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TSelf"></typeparam>
        </member>
    </members>
</doc>
