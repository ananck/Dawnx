<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dawnx</name>
    </assembly>
    <members>
        <member name="M:Dawnx.DawnIEntity.Accept``1(``0,``0)">
            <summary>
            Accept all property values which are can be read and write from another model.
                (Only ValueTypes, exclude 'KeyAttribute' and attributes which are start with 'Track')
            </summary>
            <typeparam name="TEntity">Instance of IEntity</typeparam>
            <param name="this">Source model</param>
            <param name="model">The model which provide values</param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEntity.Accept``1(``0,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Accept the specified property values from another model.
            </summary>
            <typeparam name="TEntity">Instance of IEntity</typeparam>
            <param name="this">Source model</param>
            <param name="model">The model which provide values</param>
            <param name="includes">Specifies properties that are applied to the source model.</param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIEntity.AcceptBut``1(``0,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Accept all property values which are can be read and write from another model,
                but exclude the specified properties.
                (Only ValueTypes, exclude 'KeyAttribute' and attributes which are start with 'Track')
            </summary>
            <typeparam name="TEntity">Instance of IEntity</typeparam>
            <param name="this">Source model</param>
            <param name="model">The model which provide values</param>
            <param name="excludes">Specifies properties that aren't applied to the source model.</param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIQueryable.OrderByCaseStrategy``1(System.Linq.IQueryable{``0},Dawnx.Entity.IOrderStrategy{``0})">
            <summary>
            Use an OrderByStrategy to generate an orberby expression.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="this"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIQueryable.OrderByCaseDescendingStrategy``1(System.Linq.IQueryable{``0},Dawnx.Entity.IOrderStrategy{``0})">
            <summary>
            Use an OrderByStrategy to generate an orberby expression.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="this"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIQueryable.WhereStrategy``1(System.Linq.IQueryable{``0},Dawnx.Entity.IWhereStrategy{``0})">
            <summary>
            Use a WhereStragtegy to generate a where expression.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="this"></param>
            <param name="strategy"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIQueryable.SelectPage``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            Projects page elements of a sequence into a new form.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="pageNumber">'pageNumber' starts at 1</param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Dawnx.DawnIQueryable.PageCount``1(System.Linq.IQueryable{``0},System.Int32)">
            <summary>
            Calculates the max page number through the specified page size.
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="this"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Dawnx.Entity.IEntity">
            <summary>
            Use <see cref="T:Dawnx.Entity.IEntity"/> to define entity classes to get some useful extension methods.
            </summary>
        </member>
        <member name="T:Dawnx.Entity.IEntity`1">
            <summary>
            Use <see cref="T:Dawnx.Entity.IEntity"/> to define entity classes to get some useful extension methods.
            </summary>
        </member>
    </members>
</doc>
